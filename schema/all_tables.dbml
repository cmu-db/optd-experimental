// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table database_metadata {
  id integer PK
  name varchar
  creation_time timestamp 
}

Table namespace_metadata {
  id integer PK
  database_id integer [ref: > database_metadata.id]
  name varchar
  creation_time timestamp
}

Table table_metadata {
  id integer PK
  namespace_id integer [ref: > namespace_metadata.id]
  name varchar
  creation_time timestamp
}

Table attribute {
  id integer PK // global index
  table_id integer [ref: > table_metadata.id]
  name varchar
  compression_method char
  variant_tag integer // Data type of this attribute. Should we make another table to explain the type mapping?
  base_attribute_number integer // local index within the table
  is_not_null boolean // physical property
}

Table statistic {
  id integer PK
  name varchar
  table_id integer [ref: > table_metadata.id, null] // null if not a table statistic
  creation_time timestamp
  number_of_attributes integer // 0 if a table statistic
  variant_tag integer // Should we make another table to explain the type mapping?
  description varchar // Store the sorted attribute ids of this statistic, to support quick lookup (OR we can use junction table to look up)
}

Table versioned_statistic {
  id integer PK
  epoch_id integer [ref: > event.epoch_id]
  statistic_id integer [ref: > statistic.id]
  statistic_value json
}

Table event {
  epoch_id integer PK
  source_variant varchar
  create_timestamp timestamp
  data json
}

Table plan_cost {
  id integer PK
  physical_expression_id integer [ref: > physical_expression.id]
  epoch_id integer [ref: > event.epoch_id]
  // It is json type, including computation cost, I/O cost, etc.
  cost json
  // Raw estimated output row count of this expression
  estimated_statistic integer
  // Whether the cost is valid or not. If the latest cost for an expr is invalid, then we need to recompute the cost.
  // We need to invalidate the cost when the related stats are updated.
  is_valid boolean
}

Table index {
  id integer PK
  name varchar
  table_id integer [ref: > table_metadata.id]
  // Whether it is an unique index.
  is_unique boolean
  // Only valid for unique index, if true, then null value is equal, if false, null value is distinct.
  nulls_not_distinct boolean
  // Whether the attribute is primary.
  is_primary boolean
  // If true, the table was last clustered on this index
  is_clustered boolean
  // More fields might be added in the future for expressiveness on exclusion constraint.
  is_exclusion boolean
  // Do we need it?
  number_of_attributes integer
  // Stores the related attribute ids.
  data json
}

Table trigger {
  id integer PK
  name varchar
  table_id integer [ref: > table_metadata.id]
  // This field is only valid if it is triggered by another parent trigger.
  parent_trigger_id integer [ref: > trigger.id]
  function json
}

// Not-null is handled directly in `attribute`. See `is_not_null` field.
// Constraint trigger is handled directly in `trigger`.
Table constraint {
  id integer PK
  name varchar
  variant_tag integer // pk, fk, unique, check, exclusion
  table_id integer [ref: > table_metadata.id, null] // null if not a table constraint
  index_id integer [ref: > index.id, null] // The index supporting this constraint, if it's a unique, primary key, foreign key, or exclusion constraint; else null
  foreign_ref_id integer [ref: > table_metadata.id, null] // If a foreign key, the referenced table; else null
  check_src varchar // the expression tree for a check constraint, which provides a textual representation of the constraint expression
}

// The constrained attributes (columns) if a constraint is a table constraint (including foreign keys, but not constraint triggers)
Table attribute_constraint_junction {
  attribute_id integer [ref: > attribute.id]
  constraint_id integer [ref: > constraint.id]
}

// The referenced attributes (columns) if the constraint is a foreign key
Table attribute_foreign_constraint_junction {
  attribute_id integer [ref: > attribute.id]
  constraint_id integer [ref: > constraint.id]
}

Table statistic_to_attribute_junction {
  statistic_id integer [ref: > statistic.id]
  attribute_id integer [ref: > attribute.id]
}

Table physical_expression_to_statistic_junction {
  physical_expression_id integer [ref: > physical_expression.id]
  statistic_id integer [ref: > statistic.id]
}

// Logical expressions and groups
Table logical_expression {
  id integer [pk]
  group_id integer [ref: > cascades_group.id]
  fingerprint integer
  variant_tag integer
  predicate integer [ref: > predicate.id]
}

Table cascades_group {
  id integer [pk]
  latest_winner integer [ref: > physical_expression.id, null]
  in_progress boolean
  is_optimized boolean
  parent integer [ref: > cascades_group.id]
}

// Physical expressions and properties
Table physical_expression {
  id integer [pk]
  group_id integer [ref: > cascades_group.id]
  fingerprint integer
  variant_tag integer
  predicate integer [ref: > predicate.id]
}

Table physical_property {
  id integer [pk]
  physical_expression_id integer [ref: > physical_expression.id]
  variant_tag integer
  data json
}

// Junction tables
Table logical_group_junction {
  group_id integer [ref: > cascades_group.id]
  logical_expression_id integer [ref: > logical_expression.id]
}

Table physical_group_junction {
  group_id integer [ref: > cascades_group.id]
  physical_expression_id integer [ref: > physical_expression.id]
}

// Properties
Table logical_property {
  id integer [pk]
  group_id integer [ref: > cascades_group.id]
  variant_tag integer
  data json
}

// Winners tracking
Table group_winner {
  id integer [pk]
  group_id integer [ref: > cascades_group.id]
  physical_expression_id integer [ref: > physical_expression.id]
  cost integer
  epoch_id integer [ref: > event.epoch_id]
}

Table predicate {
  id integer [pk]
  data json
  variant integer
}

Table predicate_children {
  parent_id integer [ref: > predicate.id]
  child_id integer [ref: > predicate.id]
}

Table predicate_logical_expression_junction {
  logical_expr_id integer [ref: > logical_expression.id]
  predicate_id integer [ref: > predicate.id]
}

Table predicate_physical_expression_junction {
  physical_expr_id integer [ref: > physical_expression.id]
  predicate_id integer [ref: > predicate.id]
}


