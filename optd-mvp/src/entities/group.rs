//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "group")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub status: i8,
    pub winner: Option<i32>,
    pub cost: Option<i64>,
    pub parent_id: Option<i32>,
    pub next_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::NextId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef1,
    #[sea_orm(has_many = "super::logical_children::Entity")]
    LogicalChildren,
    #[sea_orm(has_many = "super::logical_expression::Entity")]
    LogicalExpression,
    #[sea_orm(has_many = "super::physical_children::Entity")]
    PhysicalChildren,
    #[sea_orm(
        belongs_to = "super::physical_expression::Entity",
        from = "Column::Winner",
        to = "super::physical_expression::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    PhysicalExpression,
}

impl Related<super::logical_children::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LogicalChildren.def()
    }
}

impl Related<super::physical_children::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhysicalChildren.def()
    }
}

impl Related<super::logical_expression::Entity> for Entity {
    fn to() -> RelationDef {
        super::logical_children::Relation::LogicalExpression.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::logical_children::Relation::Group.def().rev())
    }
}

impl Related<super::physical_expression::Entity> for Entity {
    fn to() -> RelationDef {
        super::physical_children::Relation::PhysicalExpression.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::physical_children::Relation::Group.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
