//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "predicate_physical_expression_junction")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub physical_expr_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub predicate_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::physical_expression::Entity",
        from = "Column::PhysicalExprId",
        to = "super::physical_expression::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PhysicalExpression,
    #[sea_orm(
        belongs_to = "super::predicate::Entity",
        from = "Column::PredicateId",
        to = "super::predicate::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Predicate,
}

impl Related<super::physical_expression::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhysicalExpression.def()
    }
}

impl Related<super::predicate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Predicate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
