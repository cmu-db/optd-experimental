//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "table_metadata")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub schema_id: i32,
    pub creation_time: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attribute::Entity")]
    Attribute,
    #[sea_orm(has_many = "super::attribute_statistic::Entity")]
    AttributeStatistic,
    #[sea_orm(has_many = "super::index::Entity")]
    Index,
    #[sea_orm(
        belongs_to = "super::namespace_metadata::Entity",
        from = "Column::SchemaId",
        to = "super::namespace_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    NamespaceMetadata,
    #[sea_orm(has_many = "super::trigger::Entity")]
    Trigger,
}

impl Related<super::attribute::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attribute.def()
    }
}

impl Related<super::attribute_statistic::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttributeStatistic.def()
    }
}

impl Related<super::index::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Index.def()
    }
}

impl Related<super::namespace_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NamespaceMetadata.def()
    }
}

impl Related<super::trigger::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trigger.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
