//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "predicate_children")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub parent_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub child_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::predicate::Entity",
        from = "Column::ChildId",
        to = "super::predicate::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Predicate2,
    #[sea_orm(
        belongs_to = "super::predicate::Entity",
        from = "Column::ParentId",
        to = "super::predicate::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Predicate1,
}

pub struct PredicateChildrenLink;

impl Linked for PredicateChildrenLink {
    type FromEntity = super::predicate::Entity;

    type ToEntity = super::predicate::Entity;

    fn link(&self) -> Vec<sea_orm::LinkDef> {
        vec![
            super::predicate_children::Relation::Predicate2.def(),
            super::predicate_children::Relation::Predicate1.def(),
        ]
    }
}

impl ActiveModelBehavior for ActiveModel {}
