//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "attribute_statistic")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub epoch_id: i32,
    pub created_time: DateTimeUtc,
    pub number_of_attributes: i32,
    pub statistic_type: i32,
    pub statistic_value: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attribute_statistic_to_attribute_junction::Entity")]
    AttributeStatisticToAttributeJunction,
    #[sea_orm(
        belongs_to = "super::event::Entity",
        from = "Column::EpochId",
        to = "super::event::Column::EpochId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Event,
}

impl Related<super::attribute_statistic_to_attribute_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttributeStatisticToAttributeJunction.def()
    }
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Event.def()
    }
}

impl Related<super::attribute::Entity> for Entity {
    fn to() -> RelationDef {
        super::attribute_statistic_to_attribute_junction::Relation::Attribute.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::attribute_statistic_to_attribute_junction::Relation::AttributeStatistic
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
