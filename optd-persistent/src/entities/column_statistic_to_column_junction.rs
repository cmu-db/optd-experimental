//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "column_statistic_to_column_junction")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub column_statistic_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub column_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::column::Entity",
        from = "Column::ColumnId",
        to = "super::column::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Column,
    #[sea_orm(
        belongs_to = "super::column_statistic::Entity",
        from = "Column::ColumnStatisticId",
        to = "super::column_statistic::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ColumnStatistic,
}

impl Related<super::column::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Column.def()
    }
}

impl Related<super::column_statistic::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ColumnStatistic.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
