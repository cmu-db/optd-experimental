//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "plan_cost")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub physical_expression_id: i32,
    pub epoch_id: i32,
    pub cost: i32,
    pub is_valid: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::event::Entity",
        from = "Column::EpochId",
        to = "super::event::Column::EpochId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Event,
    #[sea_orm(has_many = "super::group_winner::Entity")]
    GroupWinner,
    #[sea_orm(
        belongs_to = "super::physical_expression::Entity",
        from = "Column::PhysicalExpressionId",
        to = "super::physical_expression::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PhysicalExpression,
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Event.def()
    }
}

impl Related<super::group_winner::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupWinner.def()
    }
}

impl Related<super::physical_expression::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhysicalExpression.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
