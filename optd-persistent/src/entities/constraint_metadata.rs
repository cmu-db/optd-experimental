//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "constraint_metadata")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub variant_tag: i32,
    pub table_id: Option<i32>,
    pub index_id: Option<i32>,
    pub foreign_ref_id: Option<i32>,
    pub check_src: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attribute_constraint_junction::Entity")]
    AttributeConstraintJunction,
    #[sea_orm(has_many = "super::attribute_foreign_constraint_junction::Entity")]
    AttributeForeignConstraintJunction,
    #[sea_orm(
        belongs_to = "super::index_metadata::Entity",
        from = "Column::IndexId",
        to = "super::index_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    IndexMetadata,
    #[sea_orm(
        belongs_to = "super::table_metadata::Entity",
        from = "Column::ForeignRefId",
        to = "super::table_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TableMetadata2,
    #[sea_orm(
        belongs_to = "super::table_metadata::Entity",
        from = "Column::TableId",
        to = "super::table_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TableMetadata1,
}

impl Related<super::attribute_constraint_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttributeConstraintJunction.def()
    }
}

impl Related<super::attribute_foreign_constraint_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttributeForeignConstraintJunction.def()
    }
}

impl Related<super::index_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IndexMetadata.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
